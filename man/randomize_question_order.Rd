% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/randomize_question_order.R
\name{randomize_question_order}
\alias{randomize_question_order}
\title{Randomize Question Order}
\usage{
randomize_question_order(
  xlsform,
  .group_id = NULL,
  permutation_limit = NULL,
  pth = NULL,
  output = TRUE
)
}
\arguments{
\item{xlsform}{A (path to a) ODK xlsx survey sheet that has a set of programmed grid questions}

\item{.group_id}{Optional - A vector of either integers or characters that describe how the questions should be grouped together. Defaults to NULL, which randomized every question}

\item{permutation_limit}{Optional - An integer to select a random sample of all possible permutations for semi-randomization}

\item{pth}{Optional - A file path to where the output should be saved. Defaults to the current working directory}

\item{output}{Optional - If TRUE will return the xlsx form as a data frame to R. If FALSE the only output is the xlsx file. Defaults to TRUE}
}
\value{
A ODK-style survey sheet as a data frame and an .xlsx sheet
}
\description{
Given a single set of grid questions already programmed on an .xlsx sheet with ODK columns,
this function will create a new .xlsx sheet with the questions randomized in every possible
order. The output captured in the new .xlsx file can be copied and pasted directly into
an XLSForm for ODK.

To keep randomization to a minimum, questions that are never shown together
(e.g., one is only shown to group A while another is only shown to group B) can
be grouped together using the `.group_id` parameter. Questions that are in the
same group will be treated as one question, reducing the number of permutations.
See details for a more thorough explanation.
}
\details{
To produce question randomization in ODK, this function takes a set of questions that are
grouped together, then creates a new group for every permutation of the questions. Each
permutation is assigned a number 1 to N where N is the number of possible permutations.
A calculate row is added to the beginning of the programming. In that row, there is a
calculation that will randomly produce a number 1 to N. A set of questions will appear
based on the random number.

The `.group_id` parameter can be used to reduce the number of permutations by grouping
certain questions together. For example, say there is a group of four questions that
need to be randomized, but two questions are only shown to group A while two questions
are only shown to group B. By grouping together an A question and a B question, the number
of permutations can be reduced from 24 (4P4) to 2 (2P2).

The `.group_id` parameter takes a vector. To use it, first group the questions together.
Continuing with the same example as before, call our four questions A1, B1, A2, B2. The
A questions are only shown to group A and the B questions are only shown to group B.
Say A1 and B1 are grouped together in group 1 and A2 and B2 are grouped together in
group 2. For the `.group_id` parameter, use the vector `c(1,1,2,2)`. Each element
in the vector is a group assignment. The first two questions are A1 and B1, which
are both assigned 1. The last two questions are A2 and B2 which are both assigned 2.
The `.group_id` vector must be the same length as the number of questions that are
being randomized.
}
